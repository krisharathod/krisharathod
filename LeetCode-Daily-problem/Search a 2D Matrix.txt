74. Search a 2D Matrix

Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
        int len = matrix.length;
       
        
        for(int i=0;i<len;i++)
        {
                int start=0;
              int end=matrix[i].length-1;
            for(int j=0;j<matrix[i].length;j++)
            {
                
                if(target>=matrix[i][0] && target<=matrix[i][matrix[i].length-1])
                {
                    if(start<=end)
                    {
                        int mid=(start+end)/2;
                        if(matrix[i][mid]== target)
                            return true;
                        if(target > matrix[i][mid])
                            start=mid+1;
                        else
                            end=mid-1;
                    }
                }
                else
                {
                    break;
                }
                    
            }
        }
        return false;
        
    }
}