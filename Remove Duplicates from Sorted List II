/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 
 Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well
Input: head = [1,2,3,3,4,4,5]
Output: [1,2,5] 

constraints
The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.
 */
 
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        
        ListNode newList=new ListNode(0);
        ListNode cur=head;
        newList.next=head;
        ListNode prev=newList;
        
        while(cur != null)
        {
                if(cur.next !=null && cur.val == cur.next.val)
                {
                    //checking same values in  list
                    while(cur.next != null && cur.val == cur.next.val )
                    {
                        cur =cur.next;
                    }
                    prev.next=cur.next;
                }
            else
            {
                prev=cur;
            }
            cur=cur.next;
        }
            
        return newList.next;
    }
}
